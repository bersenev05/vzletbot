
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from classes.user import User, admin, cityes
from classes.event import Event
from data.base_file import userbase, eventbase, sort_eventbase
import pathlib
from pathlib import Path
dir_path = pathlib.Path.cwd()

#–ú–ê–®–ò–ù–ê –°–û–°–¢–û–Ø–ù–ò–ô
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.contrib.fsm_storage.memory import MemoryStorage
storage=MemoryStorage()

class StepsForm(StatesGroup):
    get_fio=State()
    get_phone=State()
    get_date=State()


bot = Bot(token = "6100104762:AAFVZRJCVVhtula5Bo6bGlDlpPtjuav7qlI",
          parse_mode="HTML")
dp = Dispatcher(bot,storage=MemoryStorage())

statisticbot = Bot(token = "6681358573:AAEDPtrd3jNn82es9LS69eDOicI0ih9FSxk",
                   parse_mode="HTML")



eventbase["0"] = Event(name="–í—Å—Ç—Ä–µ—á–∞ –∫–ª—É–±–∞ –†–æ—Å–º–æ–ª–æ–¥–µ–∂—å.–ë–∏–∑–Ω–µ—Å",
                       url_to_tgchat="https://t.me/+9PY3bcf3ZH01MDZi",
                       photo_path=Path(dir_path, "files", "photo", "rosmol.jpg"),
                       description="–¢—É—Ç –±—É–¥–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ",
                       date = "16.03.2024",
                       time = "12:00",
                       creator="@vanya_slash",
                       location = "–ö—É–ª—å—Ç—É—Ä–Ω–∞—è —Å—Ç–∞–Ω—Ü–∏—è –ì–∞–≥–∞—Ä–∏–Ω. –ú–∞–µ—Ä—á–∞–∫–∞ 17",
                       vzletbusiness=True)

eventbase["1"] = Event(name="–Ø –≤ –¥–µ–ª–µ",
                       url_to_tgchat="https://t.me/+9PY3bcf3ZH01MDZi",
                       photo_path=Path(dir_path, "files", "photo", "yavdele.jpg"),
                       description="–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–µ–π—Å-—á–µ–º–ø–∏–æ–Ω–∞—Ç. –°–æ–∑–¥–∞–π —Å–≤–æ–π –±–∏–∑–Ω–µ—Å-–ø—Ä–æ–µ–∫—Ç —Å –ø–æ–º–æ—â—å—é –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤",
                       date = "15.03.2024",
                       time = "12:00",
                       creator="@vanya_slash",
                       location = "–ö—É–ª—å—Ç—É—Ä–Ω–∞—è —Å—Ç–∞–Ω—Ü–∏—è –ì–∞–≥–∞—Ä–∏–Ω. –ú–∞–µ—Ä—á–∞–∫–∞ 17",
                       vzletbusiness=True)

eventbase["2"] = Event(name="–ë–∏—Ç–≤–∞ –ö—Ä–µ–∞—Ç–æ—Ä–æ–≤",
                       url_to_tgchat="https://t.me/+9PY3bcf3ZH01MDZi",
                       photo_path=Path(dir_path, "files", "photo", "institut.jpg"),
                       description="–ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –ø–∂",
                       date = "11.03.2024",
                       time = "12:00",
                       creator="@vanya_slash",
                       location = "–ö—É–ª—å—Ç—É—Ä–Ω–∞—è —Å—Ç–∞–Ω—Ü–∏—è –ì–∞–≥–∞—Ä–∏–Ω. –ú–∞–µ—Ä—á–∞–∫–∞ 17",
                       vzletbusiness=True)


@dp.message_handler(commands=["start"])
async def start(message: types.Message):

    #—É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.delete()

    #–¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    if str(message.from_user.id) not in userbase:
        userbase[str(message.from_user.id)] = User(username=message.from_user.username,
                                                   id = message.from_user.id)

    #–ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ —é–∑–µ—Ä. –ß–∏—Å—Ç–æ –¥–ª—è —É–∫–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –∫–æ–¥–∞
    user = userbase[str(message.from_user.id)]

    #–¥–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    await user.AddAction("start")

    #—Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    ikb = InlineKeyboardMarkup()
    for city in cityes:
        ikb.add(InlineKeyboardButton(text=f"üìç {city}",callback_data=city))
    ikb.add(InlineKeyboardButton(text="–°–∫–æ—Ä–æ –Ω–æ–≤—ã–µ –≥–æ—Ä–æ–¥–∞!", callback_data="Krasnoyarsk"))

    #–ø–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ
    png = open(Path(dir_path,"files", "photo", "start.png"),"rb")

    #–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    msg = await bot.send_photo(caption="–ü—Ä–∏–≤–µ—Ç, —è –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π —Å—Ç–∞—Ä—Ç–∞–ø –í–∑–ª—ë—Ç! –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥",
                               reply_markup = ikb,
                               chat_id = user.id,
                               photo = png)
    png.close()

    #–æ–ø–æ–≤–µ—â–∞–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
    for adm in admin:
        await statisticbot.send_message(chat_id=adm,
                                        text=f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\n\n"
                                             f"{await user.GetInfo()}")

    #—Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    user.last_message = msg.message_id


@dp.callback_query_handler(text = cityes)
async def city(message: types.CallbackQuery):

    # –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ —é–∑–µ—Ä. –ß–∏—Å—Ç–æ –¥–ª—è —É–∫–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –∫–æ–¥–∞
    user = userbase[str(message.from_user.id)]

    #–î–æ–±–∞–≤–ª—è–µ–º —é–∑–µ—Ä—É –≥–æ—Ä–æ–¥
    user.city = message.data

    # –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    await user.AddAction(f"–í—ã–±—Ä–∞–ª {message.data}")

    #–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    ikb = InlineKeyboardMarkup()
    btn1 = InlineKeyboardButton(text = "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data="eventsnext")
    btn2 = InlineKeyboardButton(text = "–û–±—É—á–µ–Ω–∏–µ", callback_data = "learning")
    btn3 = InlineKeyboardButton(text = "–°—Ç–∞–∂–∏—Ä–æ–≤–∫–∏", callback_data = "work")
    btn4 = InlineKeyboardButton(text="–í–∑–ª—ë—Ç.–ë–∏–∑–Ω–µ—Å", callback_data="business")
    ikb.add(btn1).add(btn2).add(btn3).add(btn4)

    #–ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ
    png = open(Path(dir_path,"files", "photo", "cityes.png"),"rb")
    photo = types.InputMediaPhoto(png, caption="–ó–¥–µ—Å—å —Å–æ–±—Ä–∞–Ω—ã –≤—Å–µ —Å–∞–º—ã–µ –∫–ª–∞—Å—Å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ç–≤–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞")

    #–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    await bot.edit_message_media(chat_id=user.id,
                                 message_id = user.last_message,
                                 media = photo,
                                 reply_markup=ikb)

    png.close()


# @dp.callback_query_handler(text = "events")
# async def events(message: types.CallbackQuery):
#
#     # –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ —é–∑–µ—Ä. –ß–∏—Å—Ç–æ –¥–ª—è —É–∫–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –∫–æ–¥–∞
#     user = userbase[str(message.from_user.id)]
#
#     # –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
#     await user.AddAction(f"–í—ã–±—Ä–∞–ª {message.data}")
#
#     # –æ–±–Ω—É–ª—è–µ–º –ª–æ–∫–µ–π—à–Ω –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è –ø–æ –∫–∞—Ä—É—Å–µ–ª–∏
#     user.location = None
#
#     #–°–æ—Ä—Ç–∏—Ä—É–µ–º —ç–≤–µ–Ω—Ç—ã –ø–æ –¥–∞—Ç–∞–º
#     global eventbase
#     eventbase = await sort_eventbase(eventbase)
#
#     # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
#     ikb = InlineKeyboardMarkup()
#     btn1 = InlineKeyboardButton(text="–ü–æ–ª–µ—Ç–µ–ª–∏!", callback_data="eventsnext")
#     btn2 = InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=user.city)
#     ikb.add(btn1).add(btn2)
#
#     png = open(Path(dir_path, "files", "photo", "events.png"), "rb")
#     photo = types.InputMediaPhoto(png, caption="–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ —Å–æ–±—Ä–∞–Ω—ã –≤—Å–µ –±–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ —Ç–≤–æ—ë–º –≥–æ—Ä–æ–¥–µ.\n\n "
#                                                "–¢—ã –º–æ–∂–µ—à—å –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏ –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±—â–∏–π —á–∞—Ç.\n\n "
#                                                "–£—á–∞—Å—Ç–≤—É–π –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö –∏ –ø–æ–ª—É—á–∞–π –±–∞–ª–ª—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. "
#                                                "–¢—ã –º–æ–∂–µ—à—å –º–µ–Ω—è—Ç—å –∏—Ö –Ω–∞ —Å–∫–∏–¥–∫–∏ –∏ –ø–æ–¥–∞—Ä–∫–∏ —É –Ω–∞—à–∏—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤")
#
#     # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
#     await bot.edit_message_media(chat_id=user.id,
#                                  message_id=user.last_message,
#                                  media=photo,
#                                  reply_markup=ikb)
#
#     png.close()


callback_location = [f"event_registration_{index}" for index in list(eventbase.keys())]
@dp.callback_query_handler(text=["eventsnext","eventsback"])
async def events1(message: types.CallbackQuery):

    # –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ —é–∑–µ—Ä. –ß–∏—Å—Ç–æ –¥–ª—è —É–∫–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –∫–æ–¥–∞
    user = userbase[str(message.from_user.id)]

    # –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    await user.AddAction(f"–ª–∏—Å—Ç–Ω—É–ª –Ω–∞ —ç–≤–µ–Ω—Ç")

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —ç–≤–µ–Ω—Ç—ã –ø–æ –¥–∞—Ç–∞–º
    global eventbase
    eventbase = await sort_eventbase(eventbase)

    #–î–≤–∏–∂–µ–Ω–∏–µ –ø–æ –∫–∞—Ä—É—Å–µ–ª–∏
    if user.location == None:
        user.location = "0"

    elif message.data == "eventsnext":
        if int(user.location) < len(eventbase)-1:
            user.location = str(int(user.location) + 1)
        else:
            user.location = "0"
    else:
        if int(user.location) > 0:
            user.location = str(int(user.location) - 1)
        else:
            user.location = str(len(eventbase)-1)

    #–ø–æ–ª—É—á–∞–µ–º –∏–∑ –±–∞–∑—ã —Å–æ–±—ã—Ç–∏–µ
    event = eventbase[user.location]

    # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    ikb = InlineKeyboardMarkup()
    btn1 = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="eventsback")
    btn2 = InlineKeyboardButton(text="–î–∞–ª–µ–µ", callback_data="eventsnext")
    btn3 = InlineKeyboardButton(text="üïπ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data=f"event_registration_{user.location}")
    btn5 = InlineKeyboardButton(text="üóÇ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=user.city)
    ikb.row(btn1,btn2).add(btn3).add(btn5)


    png = open(event.photo_path, "rb")
    photo = types.InputMediaPhoto(png, caption=f"<b>{event.name}</b>\n\n"
                                               f"{event.description}\n\n"
                                               f"<b>–î–∞—Ç–∞:</b> {event.date} {event.time}")

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    await bot.edit_message_media(chat_id=user.id,
                                 message_id=user.last_message,
                                 media=photo,
                                 reply_markup=ikb)

    png.close()


@dp.callback_query_handler(text = callback_location)
async def registration1(message: types.CallbackQuery):

    # –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ —é–∑–µ—Ä. –ß–∏—Å—Ç–æ –¥–ª—è —É–∫–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –∫–æ–¥–∞
    user = userbase[str(message.from_user.id)]

    user.registration_hub = eventbase[message.data[-1]]

    #–¥–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –∏ —Ç–µ–∫—Å—Ç
    png = open(user.registration_hub.photo_path,"rb")
    photo = types.InputMediaPhoto(png, caption=f"<i>üïπ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</i>\n\n"
                                               f"<b>üéü –°–æ–±—ã—Ç–∏–µ:</b>\n<code>{user.registration_hub.name}</code>\n\n"
                                               f"<b>üóì –î–∞—Ç–∞:</b>\n<code>{user.registration_hub.date} {user.registration_hub.time}</code>\n\n"
                                               f"<b>üìç –ú–µ—Å—Ç–æ:</b>\n<code>{user.registration_hub.location}</code>\n\n"
                                               f"<b>–í–≤–µ–¥–∏ –§–ò–û</b>")

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    await bot.edit_message_media(chat_id=user.id,
                                 message_id=user.last_message,
                                 media=photo)

    await StepsForm.get_fio.set()


@dp.message_handler(state=StepsForm.get_fio)
async def registration2(message: types.Message, state: FSMContext):

    # –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ —é–∑–µ—Ä. –ß–∏—Å—Ç–æ –¥–ª—è —É–∫–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –∫–æ–¥–∞
    user = userbase[str(message.from_user.id)]

    #—É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.delete()

    #–î–æ–±–∞–≤–ª—è–µ–º –§–ò–û –≤ –±–∞–∑—É
    user.fio = message.text

    # –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –∏ —Ç–µ–∫—Å—Ç
    png = open(user.registration_hub.photo_path, "rb")
    photo = types.InputMediaPhoto(png, caption=f"<i>üïπ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</i>\n\n"
                                               f"<b>üéü –°–æ–±—ã—Ç–∏–µ:</b>\n<code>{user.registration_hub.name}</code>\n\n"
                                               f"<b>üóì –î–∞—Ç–∞:</b>\n<code>{user.registration_hub.date} {user.registration_hub.time}</code>\n\n"
                                               f"<b>üìç –ú–µ—Å—Ç–æ:</b>\n<code>{user.registration_hub.location}</code>\n\n"
                                               f"<b>üôé‚Äç‚ôÇÔ∏è –§–ò–û:</b>\n<code>{user.fio}</code>\n\n"
                                               f"<b>–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>")

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    await bot.edit_message_media(chat_id=user.id,
                                 message_id=user.last_message,
                                 media=photo)

    await StepsForm.get_phone.set()


@dp.message_handler(state=StepsForm.get_phone)
async def registration3(message: types.Message, state: FSMContext):

    # –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ —é–∑–µ—Ä. –ß–∏—Å—Ç–æ –¥–ª—è —É–∫–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –∫–æ–¥–∞
    user = userbase[str(message.from_user.id)]

    #—É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.delete()

    #–î–æ–±–∞–≤–ª—è–µ–º –§–ò–û –≤ –±–∞–∑—É
    user.phone = message.text

    ikb = InlineKeyboardMarkup()
    btn1 = InlineKeyboardButton(text="üîó –û–±—â–∏–π —á–∞—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", url=user.registration_hub.url_to_tgchat)
    btn2 = InlineKeyboardButton(text="üóÇ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=user.city)
    ikb.row(btn1).add(btn2)

    # –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –∏ —Ç–µ–∫—Å—Ç
    png = open(user.registration_hub.photo_path, "rb")
    photo = types.InputMediaPhoto(png, caption=f"<i>üïπ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</i>\n\n"
                                               f"<b>üéü –°–æ–±—ã—Ç–∏–µ:</b>\n<code>{user.registration_hub.name}</code>\n\n"
                                               f"<b>üóì –î–∞—Ç–∞:</b>\n<code>{user.registration_hub.date} {user.registration_hub.time}</code>\n\n"
                                               f"<b>üìç –ú–µ—Å—Ç–æ:</b>\n<code>{user.registration_hub.location}</code>\n\n"
                                               f"<b>üôé‚Äç‚ôÇÔ∏è –§–ò–û:</b>\n<code>{user.fio}</code>\n\n"
                                               f"<b>Ô∏èüì± –ù–æ–º–µ—Ä:</b>\n<code>{user.phone}</code>\n\n"
                                               f"<b>Ô∏è--------------------------</b>\n"
                                               f"<b>üéâ –¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!</b> <i>–ü–µ—Ä–µ—à–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ, "
                                               f"—á—Ç–æ–±—ã –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–±—ã—Ç—å</i>\n\n")

    user.registration_hub.registrations.append(user)
    user.registration_hub = None

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    await bot.edit_message_media(chat_id=user.id,
                                 message_id=user.last_message,
                                 media=photo,
                                 reply_markup=ikb)

    await state.finish()



















if __name__ == "__main__":
    executor.start_polling(dp,
                           skip_updates=True)




