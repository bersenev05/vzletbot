import datetime
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, ContentType
from classes.user import User, dad_admin, cityes, son_admin
from classes.event import Event
from classes.work import Work
from classes.grant import Grant
from classes.learning import Learning
from data.base_file import userbase, eventbase, sort_eventbase, sort_after_delete, learningbase, workbase, grantbase,date,sort_user_regs
import pathlib
from pathlib import Path

dir_path = pathlib.Path.cwd()
from classes import information_body

# –ú–ê–®–ò–ù–ê –°–û–°–¢–û–Ø–ù–ò–ô
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.contrib.fsm_storage.memory import MemoryStorage

storage = MemoryStorage()


class StepsForm(StatesGroup):
    get_fio = State()
    get_phone = State()
    get_date = State()
class AddEvent(StatesGroup):
    get_name = State()
    get_date = State()
    get_time = State()
    get_location = State()
    get_url = State()
    get_description = State()
    get_photo = State()
class AddCity(StatesGroup):
    get_city = State()


bot = Bot(token="6100104762:AAErbAZGLc6uHLUDhgnKJYfyvlDJMt1x01g",
          parse_mode="HTML")
dp = Dispatcher(bot, storage=MemoryStorage())

statisticbot = Bot(token="6681358573:AAEDPtrd3jNn82es9LS69eDOicI0ih9FSxk",
                   parse_mode="HTML")


# –°—Ç–∞—Ä—Ç
@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    # —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.delete()

    # –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    if str(message.from_user.id) not in userbase:

        userbase[str(message.from_user.id)] = User(username=message.from_user.username,
                                                   id=message.from_user.id)
        # –æ–ø–æ–≤–µ—â–∞–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
        for adm in dad_admin:
            await statisticbot.send_message(chat_id=adm,
                                            text=f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\n\n"
                                                 f"{await userbase[str(message.from_user.id)].GetInfo()}")

    # –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ —é–∑–µ—Ä. –ß–∏—Å—Ç–æ –¥–ª—è —É–∫–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –∫–æ–¥–∞
    user = userbase[str(message.from_user.id)]

    # –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    await user.AddAction("start")

    # —Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    ikb = InlineKeyboardMarkup()
    for city in cityes:
        ikb.add(InlineKeyboardButton(text=f"üìç {city}", callback_data=city))
    ikb.add(InlineKeyboardButton(text="–•–æ—á—É –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π –≥–æ—Ä–æ–¥!", callback_data="Krasnoyarsk"))

    if str(user.id) in son_admin:
        ikb.add(InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥ {admin}", callback_data=f"add_city"))

    # –ø–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ
    png = open(Path(dir_path, "files", "photo", "start.png"), "rb")

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    msg = await bot.send_photo(caption="–ü—Ä–∏–≤–µ—Ç, —è –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π —Å—Ç–∞—Ä—Ç–∞–ø –í–∑–ª—ë—Ç! –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥",
                               reply_markup=ikb,
                               chat_id=user.id,
                               photo=png)
    png.close()

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    user.last_message = msg.message_id


callback_user_regs = [f"reg_{i}" for i in range(50)]
#–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(commands=["registrations"])
async def myregs(message: types.Message):

    await message.delete()

    #–ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É
    date_list = str(datetime.datetime.now()).split("-")
    now_date = await date(f"{str(date_list[2].split()[0])}.{str(date_list[1])}.{str(date_list[0])}")

    # –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ —é–∑–µ—Ä. –ß–∏—Å—Ç–æ –¥–ª—è —É–∫–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –∫–æ–¥–∞
    user = userbase[str(message.from_user.id)]

    # –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    await user.AddAction(f"–í—ã–±—Ä–∞–ª")

    if user.city!=None:
        if user.registrations == []:

            # –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            ikb = InlineKeyboardMarkup()
            btn3 = InlineKeyboardButton(text="üóÇ–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=user.city)
            ikb.add(btn3)

            # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ
            png = open(Path(dir_path, "files", "photo", "mainmenu.png"), "rb")
            photo = types.InputMediaPhoto(png,
                                          caption="–¢—ã –µ—â—ë –Ω–∏–∫—É–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è!")

            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            await bot.edit_message_media(chat_id=user.id,
                                         message_id=user.last_message,
                                         media=photo,
                                         reply_markup=ikb)

            png.close()

        else:

            #—Å–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –≤—Å—ë –±—ã–ª–æ –ø–æ –¥–∞—Ç–∞–º
            user.registrations = await sort_user_regs(user.registrations)

            # –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            ikb = InlineKeyboardMarkup()
            s=0
            for i in user.registrations:

                if await date(i.date) >= now_date:

                    forwrite = i.name
                    if len(i.name)>=15:
                        forwrite = f"{i.name[:15]}..."

                    ikb.add(InlineKeyboardButton(text = forwrite + f" ({i.date})", callback_data=f"reg_{s}"))
                s+=1

            ikb.add(InlineKeyboardButton(text="üóÇ–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=user.city))

            # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ
            png = open(Path(dir_path, "files", "photo", "mainmenu.png"), "rb")
            photo = types.InputMediaPhoto(png,
                                          caption="–ù–∞–∂–º–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏ —É–≤–∏–¥–∏—à—å –≤—Å—é –≤–∞–∂–Ω—É—é –∏–Ω—Ñ—É!")

            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            await bot.edit_message_media(chat_id=user.id,
                                         message_id=user.last_message,
                                         media=photo,
                                         reply_markup=ikb)

            png.close()

#–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–ª–±—ç–∫–æ–º
@dp.callback_query_handler(text = "registrations")
async def myregs(message: types.Message):

    # –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É
    date_list = str(datetime.datetime.now()).split("-")
    now_date = await date(f"{str(date_list[2].split()[0])}.{str(date_list[1])}.{str(date_list[0])}")

    # –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ —é–∑–µ—Ä. –ß–∏—Å—Ç–æ –¥–ª—è —É–∫–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –∫–æ–¥–∞
    user = userbase[str(message.from_user.id)]

    # –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    await user.AddAction(f"–í—ã–±—Ä–∞–ª")

    if user.city != None:
        if user.registrations == []:

            # –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            ikb = InlineKeyboardMarkup()
            btn3 = InlineKeyboardButton(text="üóÇ–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=user.city)
            ikb.add(btn3)

            # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ
            png = open(Path(dir_path, "files", "photo", "mainmenu.png"), "rb")
            photo = types.InputMediaPhoto(png,
                                          caption="–¢—ã –µ—â—ë –Ω–∏–∫—É–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è!")

            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            await bot.edit_message_media(chat_id=user.id,
                                         message_id=user.last_message,
                                         media=photo,
                                         reply_markup=ikb)

            png.close()

        else:

            # —Å–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –≤—Å—ë –±—ã–ª–æ –ø–æ –¥–∞—Ç–∞–º
            user.registrations = await sort_user_regs(user.registrations)

            # –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            ikb = InlineKeyboardMarkup()
            s = 0
            for i in user.registrations:

                if await date(i.date) >= now_date:

                    forwrite = i.name
                    if len(i.name) >= 15:
                        forwrite = f"{i.name[:15]}..."

                    ikb.add(InlineKeyboardButton(text=forwrite + f" ({i.date})", callback_data=f"reg_{s}"))
                s += 1

            ikb.add(InlineKeyboardButton(text="üóÇ–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=user.city))

            # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ
            png = open(Path(dir_path, "files", "photo", "mainmenu.png"), "rb")
            photo = types.InputMediaPhoto(png,
                                          caption="–ù–∞–∂–º–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏ —É–≤–∏–¥–∏—à—å –≤—Å—é –≤–∞–∂–Ω—É—é –∏–Ω—Ñ—É!")

            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            await bot.edit_message_media(chat_id=user.id,
                                         message_id=user.last_message,
                                         media=photo,
                                         reply_markup=ikb)

            png.close()

#–í—ã–≤–æ–¥ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
@dp.callback_query_handler(text = callback_user_regs)
async def user_regs_info(message: types.CallbackQuery):

    # –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ —é–∑–µ—Ä. –ß–∏—Å—Ç–æ –¥–ª—è —É–∫–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –∫–æ–¥–∞
    user = userbase[str(message.from_user.id)]

    # –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    await user.AddAction(f"–í—ã–±—Ä–∞–ª")

    #–Ω–∞—Ö–æ–¥–∏–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –≤—ã–¥–∞—Ç—å
    event = user.registrations[int(message.data.split("_")[1])]

    # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    ikb = InlineKeyboardMarkup()
    ikb.add(InlineKeyboardButton(text="üîó –û–±—â–∏–π —á–∞—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", url=event.url_to_tgchat))
    ikb.add(InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="registrations"))
    ikb.add(InlineKeyboardButton(text="üóÇ–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=user.city))



    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ
    png = open(event.photo_path, "rb")
    photo = types.InputMediaPhoto(png, caption=f"<b>üéü –°–æ–±—ã—Ç–∏–µ:</b>\n<code>{event.name}</code>\n\n"
                                               f"<b>üóì –î–∞—Ç–∞:</b>\n<code>{event.date} {event.time}</code>\n\n"
                                               f"<b>üìç –ú–µ—Å—Ç–æ:</b>\n<code>{event.location}</code>\n\n")

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    await bot.edit_message_media(chat_id=user.id,
                                 message_id=user.last_message,
                                 media=photo,
                                 reply_markup=ikb)

    png.close()



# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.callback_query_handler(text=cityes)
async def city(message: types.CallbackQuery):
    # –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ —é–∑–µ—Ä. –ß–∏—Å—Ç–æ –¥–ª—è —É–∫–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –∫–æ–¥–∞
    user = userbase[str(message.from_user.id)]

    # –û–±–Ω—É–ª—è–µ–º –∫–∞—Ä—É—Å–µ–ª—å
    user.location = None

    # –î–æ–±–∞–≤–ª—è–µ–º —é–∑–µ—Ä—É –≥–æ—Ä–æ–¥
    user.city = message.data

    # –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    await user.AddAction(f"–í—ã–±—Ä–∞–ª {message.data}")

    # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    ikb = InlineKeyboardMarkup()
    btn1 = InlineKeyboardButton(text="–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data="eventsnext")
    btn2 = InlineKeyboardButton(text="–û–±—É—á–µ–Ω–∏–µ", callback_data="learningnext")
    btn3 = InlineKeyboardButton(text="–°—Ç–∞–∂–∏—Ä–æ–≤–∫–∏", callback_data="worknext")
    btn4 = InlineKeyboardButton(text="–í–∑–ª—ë—Ç.–ë–∏–∑–Ω–µ—Å", callback_data="business")
    btn5 = InlineKeyboardButton(text="–ì—Ä–∞–Ω—Ç—ã", callback_data="grantnext")

    ikb.add(btn1).add(btn2).add(btn3).add(btn5).add(btn4)

    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ
    png = open(Path(dir_path, "files", "photo", "mainmenu.png"), "rb")
    photo = types.InputMediaPhoto(png,
                                  caption="–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –º–æ—â–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, –æ–±—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫—É –∏ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!")

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    await bot.edit_message_media(chat_id=user.id,
                                 message_id=user.last_message,
                                 media=photo,
                                 reply_markup=ikb)

    png.close()



#–ø–µ—Ä–µ—Ö–æ–¥ –≤–æ –≤–∑–ª–µ—Ç –±–∏–∑–Ω–µ—Å
@dp.callback_query_handler(text="business")
async def business_func(message: types.CallbackQuery):
    # –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ —é–∑–µ—Ä. –ß–∏—Å—Ç–æ –¥–ª—è —É–∫–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –∫–æ–¥–∞
    user = userbase[str(message.from_user.id)]

    # –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    await user.AddAction(f"–í—ã–±—Ä–∞–ª {message.data}")

    # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    ikb = InlineKeyboardMarkup()
    btn1 = InlineKeyboardButton(text="üóÇ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=user.city)
    ikb.add(btn1)

    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ
    png = open(Path(dir_path, "files", "photo", "razrabotka.png"), "rb")
    photo = types.InputMediaPhoto(png,
                                  caption="–ó–¥–µ—Å—å —Ç—ã —Å–º–æ–∂–µ—à—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–≤–æ–π —Å—Ç–∞—Ä—Ç–∞–ø, –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≥—Ä–∞–Ω—Ç –∏ –¥–∞–∂–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤.\n\n–¢–µ, –∫—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç—Å—è IT, —Å–º–æ–≥—É—Ç –Ω–∞–π—Ç–∏ –¥–ª—è —Å–µ–±—è —Ç—É—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º.\n\n–ü–æ–º–∏–º–æ —ç—Ç–æ–≥–æ, –º—ã —Å–æ–±–∏—Ä–∞–µ–º—Å—è —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–æ—â–Ω—ã–π —Å—Ç–∞—Ä—Ç–∞–ø-–∞–∫—Å–µ–ª–µ—Ä–∞—Ç–æ—Ä, –≥–¥–µ –∫–∞–∂–¥—ã–π —Å–º–æ–∂–µ—Ç –ø–æ–Ω—è—Ç—å –æ—Å–Ω–æ–≤—ã —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ –∑–¥–µ—Å—å –∂–µ —Å–æ–∑–¥–∞—Ç—å –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–µ–∫—Ç\n\n"
                                          "<code>{ –≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –µ—â—ë –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ }</code>")

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    await bot.edit_message_media(chat_id=user.id,
                                 message_id=user.last_message,
                                 media=photo,
                                 reply_markup=ikb)

    png.close()



#–î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥
@dp.callback_query_handler(text="add_city")
async def addcity_func(message: types.CallbackQuery):
    # –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ —é–∑–µ—Ä. –ß–∏—Å—Ç–æ –¥–ª—è —É–∫–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –∫–æ–¥–∞
    user = userbase[str(message.from_user.id)]

    # –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    await user.AddAction(f"–í—ã–±—Ä–∞–ª")

    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ
    png = open(Path(dir_path, "files", "photo", "mainmenu.png"), "rb")
    photo = types.InputMediaPhoto(png,
                                  caption="–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞")

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    await bot.edit_message_media(chat_id=user.id,
                                 message_id=user.last_message,
                                 media=photo)

    png.close()

    await AddCity.get_city.set()

@dp.message_handler(state=AddCity.get_city)
async def getcityname(message: types.Message, state: FSMContext):
    await message.delete()

    # –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ —é–∑–µ—Ä. –ß–∏—Å—Ç–æ –¥–ª—è —É–∫–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –∫–æ–¥–∞
    user = userbase[str(message.from_user.id)]

    # –î–æ–±–∞–≤–ª—è–µ–º —é–∑–µ—Ä—É –≥–æ—Ä–æ–¥
    user.city = message.text

    # –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    await user.AddAction(f"–í—ã–±—Ä–∞–ª")

    cityes.append(message.text)
    city = message.text

    for i in [learningbase, workbase, eventbase, grantbase]:
        i[city] = {}

        i[city]["0"] = Event(name="–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç, –Ω–æ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç!",
                             url_to_tgchat="https://t.me/+9PY3bcf3ZH01MDZi",
                             photo_path=Path(dir_path, "files", "photo", "razrabotka.png"),
                             description="",
                             date="16.03.2030",
                             time="12:00",
                             creator="5965231899",
                             location="–ö—É–ª—å—Ç—É—Ä–Ω–∞—è —Å—Ç–∞–Ω—Ü–∏—è –ì–∞–≥–∞—Ä–∏–Ω. –ú–∞–µ—Ä—á–∞–∫–∞ 17",
                             city=user.city)

    ikb = InlineKeyboardMarkup()
    btn1 = InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=user.city)
    ikb.add(btn1)

    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ
    png = open(Path(dir_path, "files", "photo", "mainmenu.png"), "rb")
    photo = types.InputMediaPhoto(png, caption="–ì–æ—Ä–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω")

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    await bot.edit_message_media(chat_id=user.id,
                                 message_id=user.last_message,
                                 media=photo,
                                 reply_markup=ikb)

    cityes.sort(key=lambda x: x[0])

    await state.finish()



callback_event_setpriority = [f"event_setpriority_{index}" for index in range(0, 50)]
callback_event_location = [f"event_registration_{index}" for index in range(0, 50)]
callback_delete_event = [f"delete_event_{index}" for index in range(0, 50)]
callback_info_event = [f"info_event_{index}" for index in range(0, 50)]
# –î–≤–∏–∂–µ–Ω–∏–µ –ø–æ –∫–∞—Ä—É—Å–µ–ª–∏ —ç–≤–µ–Ω—Ç–∞–º
@dp.callback_query_handler(text=["eventsnext", "eventsback"])
async def events1(message: types.CallbackQuery):
    # –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ —é–∑–µ—Ä. –ß–∏—Å—Ç–æ –¥–ª—è —É–∫–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –∫–æ–¥–∞
    user = userbase[str(message.from_user.id)]

    # –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    await user.AddAction(f"–ª–∏—Å—Ç–Ω—É–ª –Ω–∞ —ç–≤–µ–Ω—Ç")

    # –î–≤–∏–∂–µ–Ω–∏–µ –ø–æ –∫–∞—Ä—É—Å–µ–ª–∏
    if user.location == None:
        user.location = "0"

    elif message.data == "eventsnext":
        if int(user.location) < len(eventbase[user.city]) - 1:
            user.location = str(int(user.location) + 1)
        else:
            user.location = "0"
    else:
        if int(user.location) > 0:
            user.location = str(int(user.location) - 1)
        else:
            user.location = str(len(eventbase[user.city]) - 1)

    # –ø–æ–ª—É—á–∞–µ–º –∏–∑ –±–∞–∑—ã —Å–æ–±—ã—Ç–∏–µ
    event = eventbase[user.city][user.location]

    # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    ikb = InlineKeyboardMarkup()
    btn1 = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="eventsback")
    btn2 = InlineKeyboardButton(text="–î–∞–ª–µ–µ", callback_data="eventsnext")

    if str(user.id) in event.registrations:
        btn3 = InlineKeyboardButton(text="‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã", url=f"{event.url_to_tgchat}")
    else:
        btn3 = InlineKeyboardButton(text="üïπ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data=f"event_registration_{user.location}")

    btn5 = InlineKeyboardButton(text="üóÇ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=user.city)
    ikb.row(btn1, btn2).add(btn3).add(btn5)

    if str(user.id) in son_admin:
        ikb.add(InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ {admin}", callback_data="add_event"))
        ikb.add(InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ {admin}", callback_data=f"delete_event_{user.location}"))
        ikb.add(InlineKeyboardButton(text="–°–≤–æ–¥–∫–∞ {admin}", callback_data=f"info_event_{user.location}"))

        if event.priority == True:
            ikb.add(
                InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç {admin}", callback_data=f"event_setpriority_{user.location}"))
        else:
            ikb.add(InlineKeyboardButton(text="–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç {admin}", callback_data=f"event_setpriority_{user.location}"))

    png = open(event.photo_path, "rb")
    photo = types.InputMediaPhoto(png, caption=f"<b>{event.name}</b>\n\n"
                                               f"{event.description}\n\n"
                                               f"<b>–î–∞—Ç–∞:</b> {event.date}\n"
                                               f"<b>–í—Ä–µ–º—è:</b> {event.time}")

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    await bot.edit_message_media(chat_id=user.id,
                                 message_id=user.last_message,
                                 media=photo,
                                 reply_markup=ikb)

    png.close()


callback_learning_setpriority = [f"learning_setpriority_{index}" for index in range(0, 50)]
callback_learning_location = [f"learning_registration_{index}" for index in range(0, 50)]
callback_delete_learning = [f"delete_learning_{index}" for index in range(0, 50)]
callback_info_learning = [f"info_learning_{index}" for index in range(0, 50)]
# –î–≤–∏–∂–µ–Ω–∏–µ –ø–æ –∫–∞—Ä—É—Å–µ–ª–∏ –æ–±—É—á–µ–Ω–∏—è
@dp.callback_query_handler(text=["learningnext", "learningback"])
async def events2(message: types.CallbackQuery):
    # –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ —é–∑–µ—Ä. –ß–∏—Å—Ç–æ –¥–ª—è —É–∫–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –∫–æ–¥–∞
    user = userbase[str(message.from_user.id)]

    # –ø–æ–¥–∫–ª—é—á–∞–µ–º –±–∞–∑—ã –¥–ª—è –∫–∞—Ä—É—Å–µ–ª–∏
    base = learningbase[user.city]
    key = "learning"

    # –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    await user.AddAction(f"–ª–∏—Å—Ç–Ω—É–ª –Ω–∞ —ç–≤–µ–Ω—Ç")

    # –î–≤–∏–∂–µ–Ω–∏–µ –ø–æ –∫–∞—Ä—É—Å–µ–ª–∏
    if user.location == None:
        user.location = "0"

    elif message.data == f"{key}next":
        if int(user.location) < len(base) - 1:
            user.location = str(int(user.location) + 1)
        else:
            user.location = "0"
    else:
        if int(user.location) > 0:
            user.location = str(int(user.location) - 1)
        else:
            user.location = str(len(base) - 1)

    # –ø–æ–ª—É—á–∞–µ–º –∏–∑ –±–∞–∑—ã —Å–æ–±—ã—Ç–∏–µ
    event = base[user.location]

    # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    ikb = InlineKeyboardMarkup()
    btn1 = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f"{key}back")
    btn2 = InlineKeyboardButton(text="–î–∞–ª–µ–µ", callback_data=f"{key}next")

    if str(user.id) in event.registrations:
        btn3 = InlineKeyboardButton(text="‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã", url=f"{event.url_to_tgchat}")
    else:
        btn3 = InlineKeyboardButton(text="üïπ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data=f"{key}_registration_{user.location}")

    btn5 = InlineKeyboardButton(text="üóÇ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=user.city)
    ikb.row(btn1, btn2).add(btn3).add(btn5)

    if str(user.id) in son_admin:
        ikb.add(InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ {admin}", callback_data=f"add_{key}"))
        ikb.add(InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ {admin}", callback_data=f"delete_{key}_{user.location}"))
        ikb.add(InlineKeyboardButton(text="–°–≤–æ–¥–∫–∞ {admin}", callback_data=f"info_{key}_{user.location}"))

        if event.priority == True:
            ikb.add(
                InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç {admin}", callback_data=f"learning_setpriority_{user.location}"))
        else:
            ikb.add(
                InlineKeyboardButton(text="–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç {admin}", callback_data=f"learning_setpriority_{user.location}"))

    png = open(event.photo_path, "rb")
    photo = types.InputMediaPhoto(png, caption=f"<b>{event.name}</b>\n\n"
                                               f"{event.description}\n\n"
                                               f"<b>–î–∞—Ç–∞:</b> {event.date}\n"
                                               f"<b>–í—Ä–µ–º—è:</b> {event.time}")

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    await bot.edit_message_media(chat_id=user.id,
                                 message_id=user.last_message,
                                 media=photo,
                                 reply_markup=ikb)

    png.close()


callback_work_setpriority = [f"work_setpriority_{index}" for index in range(0, 50)]
callback_work_location = [f"work_registration_{index}" for index in range(0, 50)]
callback_delete_work = [f"delete_work_{index}" for index in range(0, 50)]
callback_info_work = [f"info_work_{index}" for index in range(0, 50)]
# –î–≤–∏–∂–µ–Ω–∏–µ –ø–æ –∫–∞—Ä—É—Å–µ–ª–∏ —Å—Ç–∞–∂–∏—Ä–æ–≤–æ–∫
@dp.callback_query_handler(text=["worknext", "workback"])
async def events2(message: types.CallbackQuery):
    # –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ —é–∑–µ—Ä. –ß–∏—Å—Ç–æ –¥–ª—è —É–∫–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –∫–æ–¥–∞
    user = userbase[str(message.from_user.id)]

    # –ø–æ–¥–∫–ª—é—á–∞–µ–º –±–∞–∑—ã –¥–ª—è –∫–∞—Ä—É—Å–µ–ª–∏
    base = workbase[user.city]
    key = "work"

    # –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    await user.AddAction(f"–ª–∏—Å—Ç–Ω—É–ª –Ω–∞ —ç–≤–µ–Ω—Ç")

    # –î–≤–∏–∂–µ–Ω–∏–µ –ø–æ –∫–∞—Ä—É—Å–µ–ª–∏
    if user.location == None:
        user.location = "0"

    elif message.data == f"{key}next":
        if int(user.location) < len(base) - 1:
            user.location = str(int(user.location) + 1)
        else:
            user.location = "0"
    else:
        if int(user.location) > 0:
            user.location = str(int(user.location) - 1)
        else:
            user.location = str(len(base) - 1)

    # –ø–æ–ª—É—á–∞–µ–º –∏–∑ –±–∞–∑—ã —Å–æ–±—ã—Ç–∏–µ
    event = base[user.location]

    # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    ikb = InlineKeyboardMarkup()
    btn1 = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f"{key}back")
    btn2 = InlineKeyboardButton(text="–î–∞–ª–µ–µ", callback_data=f"{key}next")

    if str(user.id) in event.registrations:
        btn3 = InlineKeyboardButton(text="‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã", url=f"{event.url_to_tgchat}")
    else:
        btn3 = InlineKeyboardButton(text="üïπ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data=f"{key}_registration_{user.location}")

    btn5 = InlineKeyboardButton(text="üóÇ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=user.city)
    ikb.row(btn1, btn2).add(btn3).add(btn5)

    if str(user.id) in son_admin:
        ikb.add(InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞–∂–∏—Ä–æ–≤–∫—É {admin}", callback_data=f"add_{key}"))
        ikb.add(InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å —Å—Ç–∞–∂–∏—Ä–æ–≤–∫—É {admin}", callback_data=f"delete_{key}_{user.location}"))
        ikb.add(InlineKeyboardButton(text="–°–≤–æ–¥–∫–∞ {admin}", callback_data=f"info_{key}_{user.location}"))

        if event.priority == True:
            ikb.add(InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç {admin}", callback_data=f"work_setpriority_{user.location}"))
        else:
            ikb.add(InlineKeyboardButton(text="–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç {admin}", callback_data=f"work_setpriority_{user.location}"))

    png = open(event.photo_path, "rb")
    photo = types.InputMediaPhoto(png, caption=f"<b>{event.name}</b>\n\n"
                                               f"{event.description}\n\n"
                                               f"<b>–î–µ–¥–ª–∞–π–Ω:</b> {event.date}, {event.time}\n")

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    await bot.edit_message_media(chat_id=user.id,
                                 message_id=user.last_message,
                                 media=photo,
                                 reply_markup=ikb)

    png.close()


callback_grant_setpriority = [f"grant_setpriority_{index}" for index in range(0, 50)]
callback_grant_location = [f"grant_registration_{index}" for index in range(0, 50)]
callback_delete_grant = [f"delete_grant_{index}" for index in range(0, 50)]
callback_info_grant = [f"info_grant_{index}" for index in range(0, 50)]
# –î–≤–∏–∂–µ–Ω–∏–µ –ø–æ –∫–∞—Ä—É—Å–µ–ª–∏ –≥—Ä–∞–Ω—Ç–æ–≤
@dp.callback_query_handler(text=["grantnext", "grantback"])
async def events2(message: types.CallbackQuery):
    # –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ —é–∑–µ—Ä. –ß–∏—Å—Ç–æ –¥–ª—è —É–∫–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –∫–æ–¥–∞
    user = userbase[str(message.from_user.id)]

    # –ø–æ–¥–∫–ª—é—á–∞–µ–º –±–∞–∑—ã –¥–ª—è –∫–∞—Ä—É—Å–µ–ª–∏
    base = grantbase[user.city]
    key = "grant"

    # –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    await user.AddAction(f"–ª–∏—Å—Ç–Ω—É–ª –Ω–∞ —ç–≤–µ–Ω—Ç")

    # –î–≤–∏–∂–µ–Ω–∏–µ –ø–æ –∫–∞—Ä—É—Å–µ–ª–∏
    if user.location == None:
        user.location = "0"

    elif message.data == f"{key}next":
        if int(user.location) < len(base) - 1:
            user.location = str(int(user.location) + 1)
        else:
            user.location = "0"
    else:
        if int(user.location) > 0:
            user.location = str(int(user.location) - 1)
        else:
            user.location = str(len(base) - 1)

    # –ø–æ–ª—É—á–∞–µ–º –∏–∑ –±–∞–∑—ã —Å–æ–±—ã—Ç–∏–µ
    event = base[user.location]

    # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    ikb = InlineKeyboardMarkup()
    btn1 = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f"{key}back")
    btn2 = InlineKeyboardButton(text="–î–∞–ª–µ–µ", callback_data=f"{key}next")

    if str(user.id) in event.registrations:
        btn3 = InlineKeyboardButton(text="‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã", url=f"{event.url_to_tgchat}")
    else:
        btn3 = InlineKeyboardButton(text="üïπ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data=f"{key}_registration_{user.location}")

    btn5 = InlineKeyboardButton(text="üóÇ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=user.city)
    ikb.row(btn1, btn2).add(btn3).add(btn5)

    if str(user.id) in son_admin:
        ikb.add(InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≥—Ä–∞–Ω—Ç {admin}", callback_data=f"add_{key}"))
        ikb.add(InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –≥—Ä–∞–Ω—Ç {admin}", callback_data=f"delete_{key}_{user.location}"))
        ikb.add(InlineKeyboardButton(text="–°–≤–æ–¥–∫–∞ {admin}", callback_data=f"info_{key}_{user.location}"))

        if event.priority == True:
            ikb.add(
                InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç {admin}", callback_data=f"{key}_setpriority_{user.location}"))
        else:
            ikb.add(InlineKeyboardButton(text="–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç {admin}", callback_data=f"{key}_setpriority_{user.location}"))

    png = open(event.photo_path, "rb")
    photo = types.InputMediaPhoto(png, caption=f"<b>{event.name}</b>\n\n"
                                               f"{event.description}\n\n"
                                               f"<b>–î–µ–¥–ª–∞–π–Ω:</b> {event.date}, {event.time}\n")

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    await bot.edit_message_media(chat_id=user.id,
                                 message_id=user.last_message,
                                 media=photo,
                                 reply_markup=ikb)

    png.close()


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
@dp.callback_query_handler(
    text=callback_event_location + callback_learning_location + callback_work_location + callback_grant_location)
async def registration1(message: types.CallbackQuery):
    # –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ —é–∑–µ—Ä. –ß–∏—Å—Ç–æ –¥–ª—è —É–∫–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –∫–æ–¥–∞
    user = userbase[str(message.from_user.id)]

    if message.data.split("_")[0] == "event":
        user.registration_hub = eventbase[user.city][message.data[-1]]
    elif message.data.split("_")[0] == "learning":
        user.registration_hub = learningbase[user.city][message.data[-1]]
    elif message.data.split("_")[0] == "work":
        user.registration_hub = workbase[user.city][message.data[-1]]
    elif message.data.split("_")[0] == "grant":
        user.registration_hub = grantbase[user.city][message.data[-1]]

    if user.fio != None and user.phone != None:

        ikb = InlineKeyboardMarkup()
        btn1 = InlineKeyboardButton(text="–î–∞", callback_data="registration_finish")
        btn2 = InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å", callback_data="registration_start")
        ikb.add(btn1).add(btn2)

        png = open(user.registration_hub.photo_path, "rb")
        photo = types.InputMediaPhoto(png, caption=f"<i>üïπ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</i>\n\n"
                                                   f"<b>üéü –°–æ–±—ã—Ç–∏–µ:</b>\n<code>{user.registration_hub.name}</code>\n\n"
                                                   f"<b>üóì –î–∞—Ç–∞:</b>\n<code>{user.registration_hub.date} {user.registration_hub.time}</code>\n\n"
                                                   f"<b>üìç –ú–µ—Å—Ç–æ:</b>\n<code>{user.registration_hub.location}</code>\n\n"
                                                   f"<b>–§–ò–û</b>:\n<code>{user.fio}</code>\n\n"
                                                   f"<b>–ù–æ–º–µ—Ä</b>:\n<code>{user.phone}</code>\n\n"
                                                   f"<b>‚ö†Ô∏è–ü—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –§–ò–û –∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –í—Å—ë –≤–µ—Ä–Ω–æ?</b>")

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        await bot.edit_message_media(chat_id=user.id,
                                     message_id=user.last_message,
                                     media=photo,
                                     reply_markup=ikb)

    else:

        # –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –∏ —Ç–µ–∫—Å—Ç
        png = open(user.registration_hub.photo_path, "rb")
        photo = types.InputMediaPhoto(png, caption=f"<i>üïπ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</i>\n\n"
                                                   f"<b>üéü –°–æ–±—ã—Ç–∏–µ:</b>\n<code>{user.registration_hub.name}</code>\n\n"
                                                   f"<b>üóì –î–∞—Ç–∞:</b>\n<code>{user.registration_hub.date} {user.registration_hub.time}</code>\n\n"
                                                   f"<b>üìç –ú–µ—Å—Ç–æ:</b>\n<code>{user.registration_hub.location}</code>\n\n"
                                                   f"<b>‚ö†Ô∏è –ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –≤–≤–µ–¥–∏ –§–ò–û</b>")

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        await bot.edit_message_media(chat_id=user.id,
                                     message_id=user.last_message,
                                     media=photo)

        await StepsForm.get_fio.set()

@dp.callback_query_handler(text="registration_start")
async def registration_start(message: types.CallbackQuery):
    # –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ —é–∑–µ—Ä. –ß–∏—Å—Ç–æ –¥–ª—è —É–∫–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –∫–æ–¥–∞
    user = userbase[str(message.from_user.id)]

    # –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –∏ —Ç–µ–∫—Å—Ç
    png = open(user.registration_hub.photo_path, "rb")
    photo = types.InputMediaPhoto(png, caption=f"<i>üïπ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</i>\n\n"
                                               f"<b>üéü –°–æ–±—ã—Ç–∏–µ:</b>\n<code>{user.registration_hub.name}</code>\n\n"
                                               f"<b>üóì –î–∞—Ç–∞:</b>\n<code>{user.registration_hub.date} {user.registration_hub.time}</code>\n\n"
                                               f"<b>üìç –ú–µ—Å—Ç–æ:</b>\n<code>{user.registration_hub.location}</code>\n\n"
                                               f"<b>‚ö†Ô∏è –ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –≤–≤–µ–¥–∏ –§–ò–û</b>")

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    await bot.edit_message_media(chat_id=user.id,
                                 message_id=user.last_message,
                                 media=photo)

    await StepsForm.get_fio.set()

@dp.message_handler(state=StepsForm.get_fio)
async def registration2(message: types.Message, state: FSMContext):
    # –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ —é–∑–µ—Ä. –ß–∏—Å—Ç–æ –¥–ª—è —É–∫–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –∫–æ–¥–∞
    user = userbase[str(message.from_user.id)]

    # —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.delete()

    # –î–æ–±–∞–≤–ª—è–µ–º –§–ò–û –≤ –±–∞–∑—É
    if message.text not in ["/start", "/profile"]:
        user.fio = message.text

        # –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        await user.AddAction(f"–ò–º—è: {user.fio}")

        # –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –∏ —Ç–µ–∫—Å—Ç
        png = open(user.registration_hub.photo_path, "rb")
        photo = types.InputMediaPhoto(png, caption=f"<i>üïπ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</i>\n\n"
                                                   f"<b>üéü –°–æ–±—ã—Ç–∏–µ:</b>\n<code>{user.registration_hub.name}</code>\n\n"
                                                   f"<b>üóì –î–∞—Ç–∞:</b>\n<code>{user.registration_hub.date} {user.registration_hub.time}</code>\n\n"
                                                   f"<b>üìç –ú–µ—Å—Ç–æ:</b>\n<code>{user.registration_hub.location}</code>\n\n"
                                                   f"<b>üôé‚Äç‚ôÇÔ∏è –§–ò–û:</b>\n<code>{user.fio}</code>\n\n"
                                                   f"<b>‚ö†Ô∏è–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>")

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        await bot.edit_message_media(chat_id=user.id,
                                     message_id=user.last_message,
                                     media=photo)

        await StepsForm.get_phone.set()

    else:

        # –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        await user.AddAction(f"–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥: {message.text}")

        # –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –∏ —Ç–µ–∫—Å—Ç
        png = open(user.registration_hub.photo_path, "rb")
        photo = types.InputMediaPhoto(png, caption=f"<i>üïπ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</i>\n\n"
                                                   f"<b>üéü –°–æ–±—ã—Ç–∏–µ:</b>\n<code>{user.registration_hub.name}</code>\n\n"
                                                   f"<b>üóì –î–∞—Ç–∞:</b>\n<code>{user.registration_hub.date} {user.registration_hub.time}</code>\n\n"
                                                   f"<b>üìç –ú–µ—Å—Ç–æ:</b>\n<code>{user.registration_hub.location}</code>\n\n"
                                                   f"<b>‚ö†Ô∏è –ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –≤–≤–µ–¥–∏ –§–ò–û</b>\n"
                                                   f"<code>–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑</code>")

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        await bot.edit_message_media(chat_id=user.id,
                                     message_id=user.last_message,
                                     media=photo)

        await StepsForm.get_fio.set()

@dp.message_handler(state=StepsForm.get_phone)
async def registration3(message: types.Message, state: FSMContext):
    # –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ —é–∑–µ—Ä. –ß–∏—Å—Ç–æ –¥–ª—è —É–∫–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –∫–æ–¥–∞
    user = userbase[str(message.from_user.id)]

    # —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.delete()

    if message.text not in ["/start", "/profile"]:

        # –î–æ–±–∞–≤–ª—è–µ–º –§–ò–û –≤ –±–∞–∑—É
        user.phone = message.text

        # –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        await user.AddAction(f"–ù–æ–º–µ—Ä: {user.phone}")

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
        user.registration_hub.registrations.append(str(user.id))
        user.registrations.append(user.registration_hub)

        ikb = InlineKeyboardMarkup()
        btn1 = InlineKeyboardButton(text="üîó –û–±—â–∏–π —á–∞—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", url=user.registration_hub.url_to_tgchat)
        btn2 = InlineKeyboardButton(text="üóÇ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=user.city)
        ikb.row(btn1).add(btn2)

        # –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –∏ —Ç–µ–∫—Å—Ç
        png = open(user.registration_hub.photo_path, "rb")
        photo = types.InputMediaPhoto(png, caption=f"<i>üïπ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</i>\n\n"
                                                   f"<b>üéü –°–æ–±—ã—Ç–∏–µ:</b>\n<code>{user.registration_hub.name}</code>\n\n"
                                                   f"<b>üóì –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b>\n<code>{user.registration_hub.date} {user.registration_hub.time}</code>\n\n"
                                                   f"<b>üìç –ú–µ—Å—Ç–æ:</b>\n<code>{user.registration_hub.location}</code>\n\n"
                                                   f"<b>üôé‚Äç‚ôÇÔ∏è –§–ò–û:</b>\n<code>{user.fio}</code>\n\n"
                                                   f"<b>Ô∏èüì± –ù–æ–º–µ—Ä:</b>\n<code>{user.phone}</code>\n\n"
                                                   f"<b>Ô∏è--------------------------</b>\n"
                                                   f"<b>üéâ –¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!</b>\n\n<i>–í—Å–µ —Ç–≤–æ–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</i>\n/registrations\n\n")
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        await bot.edit_message_media(chat_id=user.id,
                                     message_id=user.last_message,
                                     media=photo,
                                     reply_markup=ikb)
        await state.finish()

        allregs = ''
        for event in user.registrations:
            allregs += 'üìç' + event.name + '\n'

        regfile = await user.registration_hub.GetInfoFile()

        # –û–ø–æ–≤–µ—â–∞–µ–º –∞–¥–º–∏–Ω–æ–≤
        for ad in list(set(dad_admin + [user.registration_hub.creator])):
            await statisticbot.send_document(chat_id=ad,
                                             document=open(regfile, "rb"),
                                             caption=f"<b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</b>\n\n"
                                                     f"<b>üéü {user.registration_hub.type}:</b>\n<code>{user.registration_hub.name}</code>\n\n"
                                                     f"<b> üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b>\n@{user.username} (<code>{user.id}</code>)\n\n"
                                                     f"<b>–ù–æ–º–µ—Ä:</b> \n{user.phone}\n\n"
                                                     f"<b>–§–ò–û:</b> \n{user.fio}\n\n"
                                                     f"<b>üóÇ –í—Å–µ —Ä–µ–≥–∏:</b> \n<code>{allregs}</code>")

        user.registration_hub = None

    else:

        # –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –∏ —Ç–µ–∫—Å—Ç
        png = open(user.registration_hub.photo_path, "rb")
        photo = types.InputMediaPhoto(png, caption=f"<i>üïπ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</i>\n\n"
                                                   f"<b>üéü –°–æ–±—ã—Ç–∏–µ:</b>\n<code>{user.registration_hub.name}</code>\n\n"
                                                   f"<b>üóì –î–∞—Ç–∞:</b>\n<code>{user.registration_hub.date} {user.registration_hub.time}</code>\n\n"
                                                   f"<b>üìç –ú–µ—Å—Ç–æ:</b>\n<code>{user.registration_hub.location}</code>\n\n"
                                                   f"<b>üôé‚Äç‚ôÇÔ∏è –§–ò–û:</b>\n<code>{user.fio}</code>\n\n"
                                                   f"<b>‚ö†Ô∏è–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>\n"
                                                   f"<code>–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑</code>")
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        await bot.edit_message_media(chat_id=user.id,
                                     message_id=user.last_message,
                                     media=photo)
        await StepsForm.get_phone.set()

@dp.callback_query_handler(text="registration_finish")
async def registration_finish(message: types.CallbackQuery):
    # –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ —é–∑–µ—Ä. –ß–∏—Å—Ç–æ –¥–ª—è —É–∫–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –∫–æ–¥–∞
    user = userbase[str(message.from_user.id)]

    # –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    await user.AddAction(f"–ù–æ–º–µ—Ä: {user.phone}")

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
    user.registration_hub.registrations.append(str(user.id))
    user.registrations.append(user.registration_hub)

    ikb = InlineKeyboardMarkup()
    btn1 = InlineKeyboardButton(text="üîó –û–±—â–∏–π —á–∞—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", url=user.registration_hub.url_to_tgchat)
    btn2 = InlineKeyboardButton(text="üóÇ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=user.city)
    ikb.row(btn1).add(btn2)

    # –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –∏ —Ç–µ–∫—Å—Ç
    png = open(user.registration_hub.photo_path, "rb")
    photo = types.InputMediaPhoto(png, caption=f"<i>üïπ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</i>\n\n"
                                               f"<b>üéü –°–æ–±—ã—Ç–∏–µ:</b>\n<code>{user.registration_hub.name}</code>\n\n"
                                               f"<b>üóì –î–∞—Ç–∞:</b>\n<code>{user.registration_hub.date} {user.registration_hub.time}</code>\n\n"
                                               f"<b>üìç –ú–µ—Å—Ç–æ:</b>\n<code>{user.registration_hub.location}</code>\n\n"
                                               f"<b>üôé‚Äç‚ôÇÔ∏è –§–ò–û:</b>\n<code>{user.fio}</code>\n\n"
                                               f"<b>Ô∏èüì± –ù–æ–º–µ—Ä:</b>\n<code>{user.phone}</code>\n\n"
                                               f"<b>Ô∏è--------------------------</b>\n"
                                               f"<b>üéâ –¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!</b>\n\n<i>–í—Å–µ —Ç–≤–æ–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</i>\n/registrations\n\n")
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    await bot.edit_message_media(chat_id=user.id,
                                 message_id=user.last_message,
                                 media=photo,
                                 reply_markup=ikb)

    allregs = ''
    for event in user.registrations:
        allregs += 'üìç' + event.name + '\n'

    regfile = await user.registration_hub.GetInfoFile()

    # –û–ø–æ–≤–µ—â–∞–µ–º –∞–¥–º–∏–Ω–æ–≤
    for ad in list(set(dad_admin + [user.registration_hub.creator])):
        await statisticbot.send_document(chat_id=ad,
                                         document=open(regfile, "rb"),
                                         caption=f"<b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</b>\n\n"
                                                 f"<b>üéü {user.registration_hub.type}:</b>\n<code>{user.registration_hub.name}</code>\n\n"
                                                 f"<b> üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b>\n@{user.username} (<code>{user.id}</code>)\n\n"
                                                 f"<b>–ù–æ–º–µ—Ä:</b> \n{user.phone}\n\n"
                                                 f"<b>–§–ò–û:</b> \n{user.fio}\n\n"
                                                 f"<b>üóÇ –í—Å–µ —Ä–µ–≥–∏:</b> \n<code>{allregs}</code>")

    user.registration_hub = None




# –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
@dp.callback_query_handler(text=["add_event", "add_learning", "add_work", "add_grant"])
async def add_event(message: types.CallbackQuery):
    # –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ —é–∑–µ—Ä. –ß–∏—Å—Ç–æ –¥–ª—è —É–∫–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –∫–æ–¥–∞
    user = userbase[str(message.from_user.id)]

    if message.data.split("_")[-1] == "event":
        user.create_hub = "event"
    elif message.data.split("_")[-1] == "learning":
        user.create_hub = "learning"
    elif message.data.split("_")[-1] == "work":
        user.create_hub = "work"
    elif message.data.split("_")[-1] == "grant":
        user.create_hub = "grant"

    # –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    await user.AddAction(f"–î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")

    # –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –∏ —Ç–µ–∫—Å—Ç
    png = open(Path(dir_path, "files", "photo", "createevent.png"), "rb")
    photo = types.InputMediaPhoto(png, caption=f"<b>‚ö†Ô∏è–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ</b>")

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    await bot.edit_message_media(chat_id=user.id,
                                 message_id=user.last_message,
                                 media=photo)

    await AddEvent.get_name.set()

@dp.message_handler(state=AddEvent.get_name)
async def add_event(message: types.Message, state: FSMContext):
    await message.delete()
    # –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ —é–∑–µ—Ä. –ß–∏—Å—Ç–æ –¥–ª—è —É–∫–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –∫–æ–¥–∞
    user = userbase[str(message.from_user.id)]

    # –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    await user.AddAction(f"–î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")

    # –°–∫–ª–∞–¥–∏—Ä—É–µ–º –∏–Ω—Ñ—É –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏
    await state.update_data(name=message.text)
    data = await state.get_data()

    # –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –∏ —Ç–µ–∫—Å—Ç
    png = open(Path(dir_path, "files", "photo", "createevent.png"), "rb")
    photo = types.InputMediaPhoto(png, caption=f"<b> –ù–∞–∑–≤–∞–Ω–∏–µ:</b>\n<code>{data['name']}</code>\n\n"
                                               f"<b>‚ö†Ô∏è–í–≤–µ–¥–∏ –¥–∞—Ç—É</b>\n–§–æ—Ä–º–∞—Ç: –¥–¥.–º–º.–≥–≥–≥–≥\n–ü—Ä–∏–º–µ—Ä: 16.03.2024")

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    await bot.edit_message_media(chat_id=user.id,
                                 message_id=user.last_message,
                                 media=photo)

    await AddEvent.get_date.set()

@dp.message_handler(state=AddEvent.get_date)
async def add_event(message: types.Message, state: FSMContext):
    # —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.delete()

    # –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ —é–∑–µ—Ä. –ß–∏—Å—Ç–æ –¥–ª—è —É–∫–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –∫–æ–¥–∞
    user = userbase[str(message.from_user.id)]

    # –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    await user.AddAction(f"–î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")

    # –°–∫–ª–∞–¥–∏—Ä—É–µ–º –∏–Ω—Ñ—É –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏
    await state.update_data(date=message.text)
    data = await state.get_data()

    # –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –∏ —Ç–µ–∫—Å—Ç
    png = open(Path(dir_path, "files", "photo", "createevent.png"), "rb")
    photo = types.InputMediaPhoto(png, caption=f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b>\n<code>{data['name']}</code>\n\n"
                                               f"<b>–î–∞—Ç–∞:</b>\n<code>{data['date']}</code>\n\n"
                                               f"<b>‚ö†Ô∏è–í–≤–µ–¥–∏ –≤—Ä–µ–º—è</b>\n–§–æ—Ä–º–∞—Ç: —á—á:–º–º\n–ü—Ä–∏–º–µ—Ä: 12:00")

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    await bot.edit_message_media(chat_id=user.id,
                                 message_id=user.last_message,
                                 media=photo)

    await AddEvent.get_time.set()

@dp.message_handler(state=AddEvent.get_time)
async def add_event(message: types.Message, state: FSMContext):
    # —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.delete()

    # –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ —é–∑–µ—Ä. –ß–∏—Å—Ç–æ –¥–ª—è —É–∫–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –∫–æ–¥–∞
    user = userbase[str(message.from_user.id)]

    # –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    await user.AddAction(f"–î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")

    # –°–∫–ª–∞–¥–∏—Ä—É–µ–º –∏–Ω—Ñ—É –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏
    await state.update_data(time=message.text)
    data = await state.get_data()

    # –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –∏ —Ç–µ–∫—Å—Ç
    png = open(Path(dir_path, "files", "photo", "createevent.png"), "rb")
    photo = types.InputMediaPhoto(png, caption=f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b>\n<code>{data['name']}</code>\n\n"
                                               f"<b>–î–∞—Ç–∞:</b>\n<code>{data['date']}</code>\n\n"
                                               f"<b>–í—Ä–µ–º—è:</b>\n<code>{data['time']}</code>\n\n"
                                               f"<b>‚ö†Ô∏è–í–≤–µ–¥–∏ –º–µ—Å—Ç–æ</b>")

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    await bot.edit_message_media(chat_id=user.id,
                                 message_id=user.last_message,
                                 media=photo)

    await AddEvent.get_location.set()

@dp.message_handler(state=AddEvent.get_location)
async def add_event(message: types.Message, state: FSMContext):
    # —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.delete()

    # –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ —é–∑–µ—Ä. –ß–∏—Å—Ç–æ –¥–ª—è —É–∫–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –∫–æ–¥–∞
    user = userbase[str(message.from_user.id)]

    # –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    await user.AddAction(f"–î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")

    # –°–∫–ª–∞–¥–∏—Ä—É–µ–º –∏–Ω—Ñ—É –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏
    await state.update_data(location=message.text)
    data = await state.get_data()

    # –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –∏ —Ç–µ–∫—Å—Ç
    png = open(Path(dir_path, "files", "photo", "createevent.png"), "rb")
    photo = types.InputMediaPhoto(png, caption=f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b>\n<code>{data['name']}</code>\n\n"
                                               f"<b>–î–∞—Ç–∞:</b>\n<code>{data['date']}</code>\n\n"
                                               f"<b>–í—Ä–µ–º—è:</b>\n<code>{data['time']}</code>\n\n"
                                               f"<b>–ú–µ—Å—Ç–æ:</b>\n<code>{data['location']}</code>\n\n"
                                               f"<b>‚ö†Ô∏è–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±—â–∏–π —á–∞—Ç –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ</b>")

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    await bot.edit_message_media(chat_id=user.id,
                                 message_id=user.last_message,
                                 media=photo)

    await AddEvent.get_url.set()

@dp.message_handler(state=AddEvent.get_url)
async def add_event(message: types.Message, state: FSMContext):
    # —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.delete()

    # –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ —é–∑–µ—Ä. –ß–∏—Å—Ç–æ –¥–ª—è —É–∫–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –∫–æ–¥–∞
    user = userbase[str(message.from_user.id)]

    # –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    await user.AddAction(f"–î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")

    # –°–∫–ª–∞–¥–∏—Ä—É–µ–º –∏–Ω—Ñ—É –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏
    await state.update_data(url=message.text)
    data = await state.get_data()

    # –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –∏ —Ç–µ–∫—Å—Ç
    png = open(Path(dir_path, "files", "photo", "createevent.png"), "rb")
    photo = types.InputMediaPhoto(png, caption=f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b>\n<code>{data['name']}</code>\n\n"
                                               f"<b>–î–∞—Ç–∞:</b>\n<code>{data['date']}</code>\n\n"
                                               f"<b>–í—Ä–µ–º—è:</b>\n<code>{data['time']}</code>\n\n"
                                               f"<b>–ú–µ—Å—Ç–æ:</b>\n<code>{data['location']}</code>\n\n"
                                               f"<b>–°—Å—ã–ª–∫–∞:</b>\n{data['url']}\n\n"
                                               f"<b>‚ö†Ô∏è–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ. –ú–∞–∫—Å–∏–º—É–º 90 –∑–Ω–∞–∫–æ–≤</b>")

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    await bot.edit_message_media(chat_id=user.id,
                                 message_id=user.last_message,
                                 media=photo)

    await AddEvent.get_description.set()

@dp.message_handler(state=AddEvent.get_description)
async def add_event(message: types.Message, state: FSMContext):
    # —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.delete()

    # –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ —é–∑–µ—Ä. –ß–∏—Å—Ç–æ –¥–ª—è —É–∫–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –∫–æ–¥–∞
    user = userbase[str(message.from_user.id)]

    # –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    await user.AddAction(f"–î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")

    # –°–∫–ª–∞–¥–∏—Ä—É–µ–º –∏–Ω—Ñ—É –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏
    await state.update_data(description=message.text)
    data = await state.get_data()

    # –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –∏ —Ç–µ–∫—Å—Ç
    png = open(Path(dir_path, "files", "photo", "createevent.png"), "rb")
    photo = types.InputMediaPhoto(png, caption=f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b>\n<code>{data['name']}</code>\n\n"
                                               f"<b>–î–∞—Ç–∞:</b>\n<code>{data['date']}</code>\n\n"
                                               f"<b>–í—Ä–µ–º—è:</b>\n<code>{data['time']}</code>\n\n"
                                               f"<b>–ú–µ—Å—Ç–æ:</b>\n<code>{data['location']}</code>\n\n"
                                               f"<b>–°—Å—ã–ª–∫–∞:</b>\n{data['url']}\n\n"
                                               f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n<code>{data['description']}</code>\n\n"
                                               f"<b>‚ö†Ô∏è–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–∞. –ó–∞—Ç–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∏—Ç–µ</b>")

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    await bot.edit_message_media(chat_id=user.id,
                                 message_id=user.last_message,
                                 media=photo)

    await AddEvent.get_photo.set()

@dp.message_handler(state=AddEvent.get_photo, content_types=ContentType.DOCUMENT)
async def add_event(message: types.Message, state: FSMContext):
    # —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.delete()

    # –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ —é–∑–µ—Ä. –ß–∏—Å—Ç–æ –¥–ª—è —É–∫–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –∫–æ–¥–∞
    user = userbase[str(message.from_user.id)]

    # –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    await user.AddAction(f"–î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
    data = await state.get_data()
    photo_name = (data['date'] + data['time'] + str(user.id)).replace('.', '').replace(':', '')
    await message.document.download(destination_file=Path(dir_path, 'files', 'photo', 'events', f"{photo_name}.png"))

    # –°–∫–ª–∞–¥–∏—Ä—É–µ–º –∏–Ω—Ñ—É –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏
    await state.update_data(photo_path=Path(dir_path, 'files', 'photo', 'events', f"{photo_name}.png"))
    data = await state.get_data()

    ikb = InlineKeyboardMarkup()
    btn1 = InlineKeyboardButton(text="–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="publicevent")
    btn2 = InlineKeyboardButton(text="–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="add_event")
    btn3 = InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=user.city)
    ikb.add(btn1).add(btn2).add(btn3)

    # –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –∏ —Ç–µ–∫—Å—Ç
    png = open(Path(dir_path, "files", "photo", f"{data['photo_path']}"), "rb")
    photo = types.InputMediaPhoto(png, caption=f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b>\n<code>{data['name']}</code>\n\n"
                                               f"<b>–î–∞—Ç–∞:</b>\n<code>{data['date']}</code>\n\n"
                                               f"<b>–í—Ä–µ–º—è:</b>\n<code>{data['time']}</code>\n\n"
                                               f"<b>–ú–µ—Å—Ç–æ:</b>\n<code>{data['location']}</code>\n\n"
                                               f"<b>–°—Å—ã–ª–∫–∞:</b>\n{data['url']}\n\n"
                                               f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n<code>{data['description']}</code>\n\n"
                                               f"<b>–§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:</b>\n<code>{data['photo_path']}</code>\n\n")

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    await bot.edit_message_media(chat_id=user.id,
                                 message_id=user.last_message,
                                 media=photo,
                                 reply_markup=ikb)

    if user.create_hub == "event":
        user.create_hub = Event(name=data['name'],
                                url_to_tgchat=data['url'],
                                photo_path=data['photo_path'],
                                description=data['description'],
                                creator=str(user.id),
                                date=data['date'],
                                location=data['location'],
                                time=data['time'],
                                city=user.city)

    elif user.create_hub == "learning":
        user.create_hub = Learning(name=data['name'],
                                   url_to_tgchat=data['url'],
                                   photo_path=data['photo_path'],
                                   description=data['description'],
                                   creator=str(user.id),
                                   date=data['date'],
                                   location=data['location'],
                                   time=data['time'],
                                   city=user.city)

    elif user.create_hub == "work":
        user.create_hub = Work(name=data['name'],
                               url_to_tgchat=data['url'],
                               photo_path=data['photo_path'],
                               description=data['description'],
                               creator=str(user.id),
                               date=data['date'],
                               location=data['location'],
                               time=data['time'],
                               city=user.city)

    elif user.create_hub == "grant":
        user.create_hub = Grant(name=data['name'],
                                url_to_tgchat=data['url'],
                                photo_path=data['photo_path'],
                                description=data['description'],
                                creator=str(user.id),
                                date=data['date'],
                                location=data['location'],
                                time=data['time'],
                                city=user.city)

    await state.finish()

@dp.callback_query_handler(text="publicevent")
async def publicevent(message: types.CallbackQuery):
    # –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ —é–∑–µ—Ä. –ß–∏—Å—Ç–æ –¥–ª—è —É–∫–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –∫–æ–¥–∞
    user = userbase[str(message.from_user.id)]

    # –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    await user.AddAction(f"–î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")

    # –û–ø–æ–≤–µ—â–∞–µ–º –∞–¥–º–∏–Ω–æ–≤
    for ad in dad_admin:
        await statisticbot.send_message(chat_id=ad,
                                        text=f"@{user.username} –¥–æ–±–∞–≤–∏–ª –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.\n\n"
                                             f"{await user.create_hub.GetInfo()}")

    global eventbase
    global learningbase
    global workbase
    global grantbase

    if user.create_hub.type == "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ":
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É —ç–≤–µ–Ω—Ç–æ–≤ –Ω–æ–≤—ã–π —ç–≤–µ–Ω—Ç –∏ –æ–±–Ω—É–ª—è–µ–º –∫—Ä–µ–∞—Ç–µ—Ö–∞–±
        eventbase[user.city][str(int(list(eventbase[user.city].keys())[-1]) + 1)] = user.create_hub
        user.create_hub = None

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —ç–≤–µ–Ω—Ç—ã –ø–æ –¥–∞—Ç–∞–º
        eventbase[user.city] = await sort_eventbase(eventbase[user.city])

    elif user.create_hub.type == "–û–±—É—á–µ–Ω–∏–µ":

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É —ç–≤–µ–Ω—Ç–æ–≤ –Ω–æ–≤—ã–π —ç–≤–µ–Ω—Ç –∏ –æ–±–Ω—É–ª—è–µ–º –∫—Ä–µ–∞—Ç–µ—Ö–∞–±
        learningbase[user.city][str(int(list(learningbase[user.city].keys())[-1]) + 1)] = user.create_hub
        user.create_hub = None
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —ç–≤–µ–Ω—Ç—ã –ø–æ –¥–∞—Ç–∞–º
        learningbase[user.city] = await sort_eventbase(learningbase[user.city])

    elif user.create_hub.type == "–°—Ç–∞–∂–∏—Ä–æ–≤–∫–∞":
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É —ç–≤–µ–Ω—Ç–æ–≤ –Ω–æ–≤—ã–π —ç–≤–µ–Ω—Ç –∏ –æ–±–Ω—É–ª—è–µ–º –∫—Ä–µ–∞—Ç–µ—Ö–∞–±
        workbase[user.city][str(int(list(workbase[user.city].keys())[-1]) + 1)] = user.create_hub
        user.create_hub = None
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —ç–≤–µ–Ω—Ç—ã –ø–æ –¥–∞—Ç–∞–º
        workbase[user.city] = await sort_eventbase(workbase[user.city])

    elif user.create_hub.type == "–ì—Ä–∞–Ω—Ç":
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É —ç–≤–µ–Ω—Ç–æ–≤ –Ω–æ–≤—ã–π —ç–≤–µ–Ω—Ç –∏ –æ–±–Ω—É–ª—è–µ–º –∫—Ä–µ–∞—Ç–µ—Ö–∞–±
        grantbase[user.city][str(int(list(grantbase[user.city].keys())[-1]) + 1)] = user.create_hub
        user.create_hub = None
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —ç–≤–µ–Ω—Ç—ã –ø–æ –¥–∞—Ç–∞–º
        grantbase[user.city] = await sort_eventbase(grantbase[user.city])

    # –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    ikb = InlineKeyboardMarkup()
    btn3 = InlineKeyboardButton(text="üóÇ–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=user.city)
    ikb.add(btn3)

    # –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –∏ —Ç–µ–∫—Å—Ç
    png = open(Path(dir_path, "files", "photo", "fio.png"), "rb")
    photo = types.InputMediaPhoto(png, caption=f"<b>–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É</b>\n\n")

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    await bot.edit_message_media(chat_id=user.id,
                                 message_id=user.last_message,
                                 media=photo,
                                 reply_markup=ikb)



# –£–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
@dp.callback_query_handler(text=callback_delete_event)
async def delete_event(message: types.CallbackQuery):
    # –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ —é–∑–µ—Ä. –ß–∏—Å—Ç–æ –¥–ª—è —É–∫–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –∫–æ–¥–∞
    user = userbase[str(message.from_user.id)]

    # –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    await user.AddAction(f"–î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")

    global eventbase
    # –û–ø–æ–≤–µ—â–∞–µ–º –∞–¥–º–∏–Ω–æ–≤
    for ad in dad_admin:
        await statisticbot.send_message(chat_id=ad,
                                        text=f"@{user.username} —É–¥–∞–ª–∏–ª –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ\n\n"
                                             f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ: </b>{eventbase[user.city][message.data[-1]].name}")

    eventbase[user.city] = await sort_after_delete(eventbase[user.city], message.data[-1])

    ikb = InlineKeyboardMarkup()
    btn1 = InlineKeyboardButton(text="üóÇ–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=user.city)
    ikb.add(btn1)

    # –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –∏ —Ç–µ–∫—Å—Ç
    png = open(Path(dir_path, "files", "photo", "fio.png"), "rb")
    photo = types.InputMediaPhoto(png, caption=f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ\n\n")

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    await bot.edit_message_media(chat_id=user.id,
                                 message_id=user.last_message,
                                 media=photo,
                                 reply_markup=ikb)

# –£–¥–∞–ª–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ
@dp.callback_query_handler(text=callback_delete_learning)
async def delete_event(message: types.CallbackQuery):
    # –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ —é–∑–µ—Ä. –ß–∏—Å—Ç–æ –¥–ª—è —É–∫–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –∫–æ–¥–∞
    user = userbase[str(message.from_user.id)]

    # –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    await user.AddAction(f"–î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")

    global learningbase
    # –û–ø–æ–≤–µ—â–∞–µ–º –∞–¥–º–∏–Ω–æ–≤
    for ad in dad_admin:
        await statisticbot.send_message(chat_id=ad,
                                        text=f"@{user.username} —É–¥–∞–ª–∏–ª –æ–±—É—á–µ–Ω–∏–µ\n\n"
                                             f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ: </b>{learningbase[user.city][message.data[-1]].name}")

    learningbase[user.city] = await sort_after_delete(learningbase[user.city], message.data[-1])

    ikb = InlineKeyboardMarkup()
    btn1 = InlineKeyboardButton(text="üóÇ–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=user.city)
    ikb.add(btn1)

    # –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –∏ —Ç–µ–∫—Å—Ç
    png = open(Path(dir_path, "files", "photo", "fio.png"), "rb")
    photo = types.InputMediaPhoto(png, caption=f"–û–±—É—á–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ\n\n")

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    await bot.edit_message_media(chat_id=user.id,
                                 message_id=user.last_message,
                                 media=photo,
                                 reply_markup=ikb)

# –£–¥–∞–ª–∏—Ç—å c—Ç–∞–∂–∏—Ä–æ–≤–∫—É
@dp.callback_query_handler(text=callback_delete_work)
async def delete_event(message: types.CallbackQuery):
    # –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ —é–∑–µ—Ä. –ß–∏—Å—Ç–æ –¥–ª—è —É–∫–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –∫–æ–¥–∞
    user = userbase[str(message.from_user.id)]

    # –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    await user.AddAction(f"–î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")

    global workbase
    # –û–ø–æ–≤–µ—â–∞–µ–º –∞–¥–º–∏–Ω–æ–≤
    for ad in dad_admin:
        await statisticbot.send_message(chat_id=ad,
                                        text=f"@{user.username} —É–¥–∞–ª–∏–ª –æ–±—É—á–µ–Ω–∏–µ\n\n"
                                             f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ: </b>{workbase[user.city][message.data[-1]].name}")

    workbase[user.city] = await sort_after_delete(workbase[user.city], message.data[-1])

    ikb = InlineKeyboardMarkup()
    btn1 = InlineKeyboardButton(text="üóÇ–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=user.city)
    ikb.add(btn1)

    # –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –∏ —Ç–µ–∫—Å—Ç
    png = open(Path(dir_path, "files", "photo", "fio.png"), "rb")
    photo = types.InputMediaPhoto(png, caption=f"–°—Ç–∞–∂–∏—Ä–æ–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞\n\n")

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    await bot.edit_message_media(chat_id=user.id,
                                 message_id=user.last_message,
                                 media=photo,
                                 reply_markup=ikb)

# –£–¥–∞–ª–∏—Ç—å –≥—Ä–∞–Ω—Ç
@dp.callback_query_handler(text=callback_delete_grant)
async def delete_event(message: types.CallbackQuery):
    # –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ —é–∑–µ—Ä. –ß–∏—Å—Ç–æ –¥–ª—è —É–∫–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –∫–æ–¥–∞
    user = userbase[str(message.from_user.id)]

    # –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    await user.AddAction(f"–î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")

    global grantbase
    # –û–ø–æ–≤–µ—â–∞–µ–º –∞–¥–º–∏–Ω–æ–≤
    for ad in dad_admin:
        await statisticbot.send_message(chat_id=ad,
                                        text=f"@{user.username} —É–¥–∞–ª–∏–ª –æ–±—É—á–µ–Ω–∏–µ\n\n"
                                             f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ: </b>{workbase[user.city][message.data[-1]].name}")

    grantbase[user.city] = await sort_after_delete(grantbase[user.city], message.data[-1])

    ikb = InlineKeyboardMarkup()
    btn1 = InlineKeyboardButton(text="üóÇ–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=user.city)
    ikb.add(btn1)

    # –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –∏ —Ç–µ–∫—Å—Ç
    png = open(Path(dir_path, "files", "photo", "fio.png"), "rb")
    photo = types.InputMediaPhoto(png, caption=f"–ì—Ä–∞–Ω—Ç —É–¥–∞–ª–µ–Ω\n\n")

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    await bot.edit_message_media(chat_id=user.id,
                                 message_id=user.last_message,
                                 media=photo,
                                 reply_markup=ikb)



# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏
@dp.callback_query_handler(text=callback_info_event)
async def info_event(message: types.CallbackQuery):

    # –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ —é–∑–µ—Ä. –ß–∏—Å—Ç–æ –¥–ª—è —É–∫–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –∫–æ–¥–∞
    user = userbase[str(message.from_user.id)]

    # –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    await user.AddAction(f"–î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")

    regfile = await eventbase[user.city][message.data[-1]].GetInfoFile()

    await statisticbot.send_document(chat_id=user.id,
                                     document=open(regfile, "rb"),
                                     caption=f"<b>—Å–≤–æ–¥–∫–∞ –ø–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é {eventbase[user.city][message.data[-1]].name}</b>")

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –æ–±—É—á–µ–Ω–∏–∏
@dp.callback_query_handler(text=callback_info_learning)
async def info_event(message: types.CallbackQuery):
    # –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ —é–∑–µ—Ä. –ß–∏—Å—Ç–æ –¥–ª—è —É–∫–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –∫–æ–¥–∞
    user = userbase[str(message.from_user.id)]

    # –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    await user.AddAction(f"–î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")

    regfile = await learningbase[user.city][message.data[-1]].GetInfoFile()

    await statisticbot.send_document(chat_id=user.id,
                                     document=open(regfile, "rb"),
                                     caption=f"<b>—Å–≤–æ–¥–∫–∞ –ø–æ –æ–±—É—á–µ–Ω–∏—é {learningbase[user.city][message.data[-1]].name}</b>")

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–µ
@dp.callback_query_handler(text=callback_info_work)
async def info_event(message: types.CallbackQuery):
    # –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ —é–∑–µ—Ä. –ß–∏—Å—Ç–æ –¥–ª—è —É–∫–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –∫–æ–¥–∞
    user = userbase[str(message.from_user.id)]

    # –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    await user.AddAction(f"–î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")

    regfile = await workbase[user.city][message.data[-1]].GetInfoFile()

    await statisticbot.send_document(chat_id=user.id,
                                     document=open(regfile, "rb"),
                                     caption=f"<b>—Å–≤–æ–¥–∫–∞ –ø–æ –æ–±—É—á–µ–Ω–∏—é {workbase[user.city][message.data[-1]].name}</b>")

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä–∞–Ω—Ç–µ
@dp.callback_query_handler(text=callback_info_grant)
async def info_event(message: types.CallbackQuery):
    # –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ —é–∑–µ—Ä. –ß–∏—Å—Ç–æ –¥–ª—è —É–∫–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –∫–æ–¥–∞
    user = userbase[str(message.from_user.id)]

    # –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    await user.AddAction(f"–î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")

    regfile = await grantbase[user.city][message.data[-1]].GetInfoFile()

    await statisticbot.send_document(chat_id=user.id,
                                     document=open(regfile, "rb"),
                                     caption=f"<b>—Å–≤–æ–¥–∫–∞ –ø–æ –≥—Ä–∞–Ω—Ç—É:</b>\n{grantbase[user.city][message.data[-1]].name}")



# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
@dp.callback_query_handler(
    text=callback_learning_setpriority + callback_event_setpriority + callback_work_setpriority + callback_grant_setpriority)
async def setpriority_func(message: types.CallbackQuery):
    global workbase
    global eventbase
    global learningbase

    # –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ —é–∑–µ—Ä. –ß–∏—Å—Ç–æ –¥–ª—è —É–∫–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –∫–æ–¥–∞
    user = userbase[str(message.from_user.id)]

    # –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    await user.AddAction(f"–î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")

    data = message.data.split("_")
    msg = ""
    name = ""

    if data[0] == "event":

        if eventbase[user.city][data[2]].priority == True:
            eventbase[user.city][data[2]].priority = None
        else:
            eventbase[user.city][data[2]].priority = True
        msg = "–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"

        name = eventbase[user.city][data[2]].name
        eventbase[user.city] = await sort_eventbase(eventbase[user.city])

    elif data[0] == "learning":
        if learningbase[user.city][data[2]].priority == True:
            learningbase[user.city][data[2]].priority = None
        else:
            learningbase[user.city][data[2]].priority = True
        msg = "–æ–±—É—á–µ–Ω–∏–µ"
        name = learningbase[user.city][data[2]].name
        learningbase[user.city] = await sort_eventbase(learningbase[user.city])

    elif data[0] == "work":
        if workbase[user.city][data[2]].priority == True:
            workbase[user.city][data[2]].priority = None
        else:
            workbase[user.city][data[2]].priority = True
        msg = "—Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∞"
        name = workbase[user.city][data[2]].name
        workbase[user.city] = await sort_eventbase(workbase[user.city])

    await statisticbot.send_message(chat_id=user.id,
                                    text=f"<b>{msg}: {name}\n–ò–∑–º–µ–Ω–µ–Ω –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç</b>")

    ikb = InlineKeyboardMarkup()
    ikb.add(InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=user.city))

    png = open(Path(dir_path, "files", "photo", "fio.png"), "rb")
    photo = types.InputMediaPhoto(png, caption=f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏–∑–º–µ–Ω—ë–Ω. –ë–∞–∑—ã –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    await bot.edit_message_media(chat_id=user.id,
                                 message_id=user.last_message,
                                 media=photo,
                                 reply_markup=ikb)

    png.close()


if __name__ == "__main__":
    executor.start_polling(dp,
                           skip_updates=True)
